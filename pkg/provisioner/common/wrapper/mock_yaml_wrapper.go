// Code generated by MockGen. DO NOT EDIT.
// Source: yaml_wrapper.go

// Package wrapper is a generated GoMock package.
package wrapper

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockYamlInterface is a mock of YamlInterface interface
type MockYamlInterface struct {
	ctrl     *gomock.Controller
	recorder *MockYamlInterfaceMockRecorder
}

// MockYamlInterfaceMockRecorder is the mock recorder for MockYamlInterface
type MockYamlInterfaceMockRecorder struct {
	mock *MockYamlInterface
}

// NewMockYamlInterface creates a new mock instance
func NewMockYamlInterface(ctrl *gomock.Controller) *MockYamlInterface {
	mock := &MockYamlInterface{ctrl: ctrl}
	mock.recorder = &MockYamlInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockYamlInterface) EXPECT() *MockYamlInterfaceMockRecorder {
	return m.recorder
}

// Unmarshal mocks base method
func (m *MockYamlInterface) Unmarshal(in []byte, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockYamlInterfaceMockRecorder) Unmarshal(in, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockYamlInterface)(nil).Unmarshal), in, out)
}

// Marshal mocks base method
func (m *MockYamlInterface) Marshal(in interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", in)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockYamlInterfaceMockRecorder) Marshal(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockYamlInterface)(nil).Marshal), in)
}

// NewDecoder mocks base method
func (m *MockYamlInterface) NewDecoder(r io.Reader) YamlDecoderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDecoder", r)
	ret0, _ := ret[0].(YamlDecoderInterface)
	return ret0
}

// NewDecoder indicates an expected call of NewDecoder
func (mr *MockYamlInterfaceMockRecorder) NewDecoder(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDecoder", reflect.TypeOf((*MockYamlInterface)(nil).NewDecoder), r)
}

// MockYamlDecoderInterface is a mock of YamlDecoderInterface interface
type MockYamlDecoderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockYamlDecoderInterfaceMockRecorder
}

// MockYamlDecoderInterfaceMockRecorder is the mock recorder for MockYamlDecoderInterface
type MockYamlDecoderInterfaceMockRecorder struct {
	mock *MockYamlDecoderInterface
}

// NewMockYamlDecoderInterface creates a new mock instance
func NewMockYamlDecoderInterface(ctrl *gomock.Controller) *MockYamlDecoderInterface {
	mock := &MockYamlDecoderInterface{ctrl: ctrl}
	mock.recorder = &MockYamlDecoderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockYamlDecoderInterface) EXPECT() *MockYamlDecoderInterfaceMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockYamlDecoderInterface) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockYamlDecoderInterfaceMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockYamlDecoderInterface)(nil).Decode), v)
}
