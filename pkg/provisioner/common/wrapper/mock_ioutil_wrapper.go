// Code generated by MockGen. DO NOT EDIT.
// Source: ioutil_wrapper.go

// This file is a generated GoMock file.
package wrapper

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockIoUtilInterface is a mock of IoUtilInterface interface
type MockIoUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIoUtilInterfaceMockRecorder
}

// MockIoUtilInterfaceMockRecorder is the mock recorder for MockIoUtilInterface
type MockIoUtilInterfaceMockRecorder struct {
	mock *MockIoUtilInterface
}

// NewMockIoUtilInterface creates a new mock instance
func NewMockIoUtilInterface(ctrl *gomock.Controller) *MockIoUtilInterface {
	mock := &MockIoUtilInterface{ctrl: ctrl}
	mock.recorder = &MockIoUtilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoUtilInterface) EXPECT() *MockIoUtilInterfaceMockRecorder {
	return m.recorder
}

// ReadFile mocks base method
func (m *MockIoUtilInterface) ReadFile(fileName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", fileName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockIoUtilInterfaceMockRecorder) ReadFile(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockIoUtilInterface)(nil).ReadFile), fileName)
}

// WriteFile mocks base method
func (m *MockIoUtilInterface) WriteFile(fileName string, data []byte, fileMode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", fileName, data, fileMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockIoUtilInterfaceMockRecorder) WriteFile(fileName, data, fileMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockIoUtilInterface)(nil).WriteFile), fileName, data, fileMode)
}
