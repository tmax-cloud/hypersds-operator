// Code generated by MockGen. DO NOT EDIT.
// Source: os_wrapper.go

// Package wrapper is a generated GoMock package.
package wrapper

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockOsInterface is a mock of OsInterface interface
type MockOsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOsInterfaceMockRecorder
}

// MockOsInterfaceMockRecorder is the mock recorder for MockOsInterface
type MockOsInterfaceMockRecorder struct {
	mock *MockOsInterface
}

// NewMockOsInterface creates a new mock instance
func NewMockOsInterface(ctrl *gomock.Controller) *MockOsInterface {
	mock := &MockOsInterface{ctrl: ctrl}
	mock.recorder = &MockOsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOsInterface) EXPECT() *MockOsInterfaceMockRecorder {
	return m.recorder
}

// MkdirAll mocks base method
func (m *MockOsInterface) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockOsInterfaceMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockOsInterface)(nil).MkdirAll), path, perm)
}
