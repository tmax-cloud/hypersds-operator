// Code generated by MockGen. DO NOT EDIT.
// Source: exec_wrapper.go

package wrapper

import (
	bytes "bytes"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecInterface is a mock of ExecInterface interface
type MockExecInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExecInterfaceMockRecorder
}

// MockExecInterfaceMockRecorder is the mock recorder for MockExecInterface
type MockExecInterfaceMockRecorder struct {
	mock *MockExecInterface
}

// NewMockExecInterface creates a new mock instance
func NewMockExecInterface(ctrl *gomock.Controller) *MockExecInterface {
	mock := &MockExecInterface{ctrl: ctrl}
	mock.recorder = &MockExecInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockExecInterface) EXPECT() *MockExecInterfaceMockRecorder {
	return _m.recorder
}

// CommandExecute mocks base method
func (_m *MockExecInterface) CommandExecute(resultStdout *bytes.Buffer, resultStderr *bytes.Buffer, ctx context.Context, name string, arg ...string) error {
	_s := []interface{}{resultStdout, resultStderr, ctx, name}
	for _, _x := range arg {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CommandExecute", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommandExecute indicates an expected call of CommandExecute
func (_mr *MockExecInterfaceMockRecorder) CommandExecute(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CommandExecute", reflect.TypeOf((*MockExecInterface)(nil).CommandExecute), _s...)
}
