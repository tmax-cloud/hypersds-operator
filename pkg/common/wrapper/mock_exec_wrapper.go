// Code generated by MockGen. DO NOT EDIT.
// Source: exec_wrapper.go

// Package wrapper is a generated GoMock package.
package wrapper

import (
	bytes "bytes"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecInterface is a mock of ExecInterface interface
type MockExecInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExecInterfaceMockRecorder
}

// MockExecInterfaceMockRecorder is the mock recorder for MockExecInterface
type MockExecInterfaceMockRecorder struct {
	mock *MockExecInterface
}

// NewMockExecInterface creates a new mock instance
func NewMockExecInterface(ctrl *gomock.Controller) *MockExecInterface {
	mock := &MockExecInterface{ctrl: ctrl}
	mock.recorder = &MockExecInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecInterface) EXPECT() *MockExecInterfaceMockRecorder {
	return m.recorder
}

// CommandExecute mocks base method
func (m *MockExecInterface) CommandExecute(ctx context.Context, resultStdout, resultStderr *bytes.Buffer, name string, arg ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, resultStdout, resultStderr, name}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandExecute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommandExecute indicates an expected call of CommandExecute
func (mr *MockExecInterfaceMockRecorder) CommandExecute(ctx, resultStdout, resultStderr, name interface{}, arg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, resultStdout, resultStderr, name}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandExecute", reflect.TypeOf((*MockExecInterface)(nil).CommandExecute), varargs...)
}
